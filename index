<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://unpkg.com/tabulator-tables/dist/css/tabulator.min.css" rel="stylesheet">
    <script type="text/javascript" src="https://unpkg.com/tabulator-tables/dist/js/tabulator.min.js"></script>
    <title>Countries Information</title>
    <style>
        body {
            background-color: #FFDAB9; /* Pastel Orange */
            margin: 50;
            padding: 0;
            font-family: 'Arial', sans-serif;
        }

        h1 {
            color: #333; /* Dark Text Color */
            text-align: center;
            padding: 20px;
            margin-bottom: 0;
        }
 </style>
</head>
<body>

    <h1>COUNTRIES AND THEIR INFORMATION</h1>

<h2>World Map with Countries</h2>

<iframe src="https://visitedplaces.com/embed/?map=world&projection=geoNaturalEarth1&theme=dark-green&water=1&graticule=0&names=1&duration=2000&placeduration=100&slider=0&autoplay=0&autozoom=none&autostep=0&home=US&places=~IN.3572d4_CN.f551a0_US.efa92e_PK.13b98f_ID.fedd06" style="width: 100%; height: 600px;"></iframe>

<!-- VisitedPlaces.com code -->
<script>
// VisitedPlaces.com code
var visitedplaces_config = {
  "map": "world",
  "projection": "geoNaturalEarth1",
  "theme": "dark-green",
  "water": 1,
  "graticule": 0,
  "names": 1,
  "duration": 2000,
  "slider": 0,
  "autoplay": 0,
  "autozoom": "none",
  "data": [
    {
      "places": [
        "IN",
        "CN",
        "US",
        "PK",
        "ID"
      ],
      "colors": {
        "US": "efa92e",
        "IN": "3572d4",
        "CN": "f551a0",
        "PK": "13b98f",
        "ID": "fedd06"
      }
    }
  ],
  "home": "US"
};
</script>
<script src="https://www.visitedplaces.com/js/common.js"></script>
<script src="https://www.visitedplaces.com/js/viewer.js"></script>
<div id="chartdiv" style="width: 100%; height: 600px;">
<!-- end: VisitedPlaces.com code -->


    <h2>Highest Country Populations</h2>

<!-- import { useState } from 'react' --!>

    <input type="text" id="filterInput" placeholder="Search..." />
    <label>
        <input type="checkbox" id="inStockOnly" />
        Only show Countries with positive yearly change
    </label>

    <table id="countryTable">
        <thead>
            <tr>
                <th>Country</th>
                <th>Population</th>
            </tr>
        </thead>
        <tbody>
            <!-- Country rows will be dynamically added here -->
        </tbody>
    </table>

    <script>
        const countries = [
            { category: "Country", population: "1,428,627,663", stocked: true, name: "India" },
            { category: "Country", population: "1,425,671,352", stocked: false, name: "China" },
            { category: "Country", population: "339,996,563", stocked: true, name: "United States" },
            { category: "Country", population: "277,534,122", stocked: true, name: "Indonesia" },
            { category: "Country", population: "240,485,658", stocked: true, name: "Pakistan" },
        ];

        const filterInput = document.getElementById('filterInput');
        const inStockOnlyCheckbox = document.getElementById('inStockOnly');
        const countryTableBody = document.querySelector('#countryTable tbody');

        function renderTable() {
            countryTableBody.innerHTML = '';

            countries.forEach(country => {
                if (
                    country.name.toLowerCase().includes(filterInput.value.toLowerCase()) &&
                    (!inStockOnlyCheckbox.checked || (inStockOnlyCheckbox.checked && country.stocked))
                ) {
                    const row = document.createElement('tr');
                    const nameColumn = document.createElement('td');
                    const populationColumn = document.createElement('td');

                    nameColumn.textContent = country.name;
                    populationColumn.textContent = country.population;

                    row.appendChild(nameColumn);
                    row.appendChild(populationColumn);

                    countryTableBody.appendChild(row);
                }
            });
        }

        // Initial render
        renderTable();

        // Event listeners for filtering
        filterInput.addEventListener('input', renderTable);
        inStockOnlyCheckbox.addEventListener('change', renderTable);
    </script>

    <h2>Top 5 Countries and their Population</h2>

<div>
  <canvas id="myChart" width="400" height="400"></canvas>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
  const ctx = document.getElementById('myChart');

  new Chart(ctx, {
    type: 'pie',
    data: {
      labels: ['India', 'China', 'United States', 'Indonesia', 'Pakistan'],
      datasets: [{
        label: 'Population Amount',
        data: [1428627663, 1425671352, 339996563, 277534122, 240485658],
        borderWidth: 2
      }]
    },
    options: {
      responsive: true, // Allow the chart to be responsive
      maintainAspectRatio: false, // Prevent the chart from maintaining a constant aspect ratio
      scales: {
        y: {
          beginAtZero: true
        }
      }
    }
  });
</script>

<h2> Countries and their GDP</h2>

<div id="example-table"></div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    var tabledata = [
        {country:"India", GDP:"$3,385,090,000,000", GDP_growth:"7.00%"},
        {country:"China", GDP: "$17,963,200,000,000", GDP_growth:"2.99%"},
        {country:"United States", GDP:"$25,462,700,000,000", GDP_growth:"2.06%"},
        {country:"Indonesia", GDP:"$1,319,100,000,000", GDP_growth:"5.31%"},
        {country:"Pakistan", GDP: "$376,533,000,000", GDP_growth:"6.19%"},
    ];

    var table = new Tabulator("#example-table", {
        data: tabledata,
        autoColumns: true,
    });
});



    <h1>Bus Driver Weekly Pay Calculator</h1>

    <label for="hoursWorked">Enter Hours Worked:</label>
    <input type="number" id="hoursWorked" placeholder="Enter hours">
    <button onclick="calculatePay()">Calculate Weekly Pay</button>

    <p id="result"></p>

    <script>
        function calculateWeeklyPay(hoursWorked) {
            const hourlyRate = 16;
            return hoursWorked * hourlyRate;
        }

        function calculatePay() {
            const hoursWorkedInput = document.getElementById('hoursWorked');
            const resultParagraph = document.getElementById('result');

            // Check if the input is a valid number
            const hoursWorked = parseFloat(hoursWorkedInput.value);
            if (isNaN(hoursWorked)) {
                resultParagraph.textContent = "Please enter a valid number of hours.";
            } else {
                const weeklyPay = calculateWeeklyPay(hoursWorked);
                resultParagraph.textContent = `Weekly pay: $${weeklyPay.toFixed(2)}`;
            }
        }


</script>



</body>
</html>



